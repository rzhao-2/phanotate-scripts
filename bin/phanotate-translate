#!/usr/bin/env python3

from Bio import SeqIO
from Bio.Seq import Seq
from Bio.Data.CodonTable import TranslationError
import sys
import argparse

TRANSLATION_TABLE = 11 # bacterial, archaeal and plant plastid code

def get_args():
    parser = argparse.ArgumentParser(description='Translates open reading frames in a fasta file.')
    parser.add_argument('-o', '--output', action='store', default=sys.stdout, help='Output file location in fasta format [default: stdout]')
    required = parser.add_argument_group('required')
    required.add_argument('-i', '--input', action='store', required=True, help='Input file in fasta format')
    
    return parser

def translate(filepath):
    records = SeqIO.parse(filepath, "fasta")
    proteins = []
    for record in records:
        try:
            record.seq = record.seq.translate(table=TRANSLATION_TABLE, cds=True)
        except TranslationError:
            # check if sequence begins with alternative start codon
            if record.seq[:3] == Seq("GTG") | record.seq[:3] == Seq("TTG"):
                record.seq = Seq("M") + record.seq.translate(table=TRANSLATION_TABLE, cds=False, to_stop=True)[1:]
            else:
                record.seq = record.seq.translate(table=TRANSLATION_TABLE, cds=False, to_stop=True)
        proteins.append(record)
    return proteins

def main():
    args = get_args().parse_args()

    infile = args.input
    outfile = args.output

    proteins = translate(infile)
    SeqIO.write(proteins, outfile, "fasta")

if __name__ == '__main__':
    main()
